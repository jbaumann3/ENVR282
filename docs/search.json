[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ENVR 282",
    "section": "",
    "text": "Welcome to ENVR 282: Research Methods in Environmental Science."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "getting_started.html",
    "href": "getting_started.html",
    "title": "Lab 0: Getting Started",
    "section": "",
    "text": "IN THIS TUTORIAL YOU WILL LEARN:\n1.) How to access and/or install R and RStudio\n2.) How to navigate RStudio\n3.) How to set and change the working directory\n4.) How to setup an RStudio Project\n5.) How to make a quarto doc\n6.) Some R basics"
  },
  {
    "objectID": "getting_started.html#how-to-set-the-working-directory",
    "href": "getting_started.html#how-to-set-the-working-directory",
    "title": "Lab 0: Getting Started",
    "section": "How to SET the working directory",
    "text": "How to SET the working directory\n1.) Using the “Files” tab to set manually: a.) Using the ‘…’ in the ‘Files’ tab you can select any directory (folder) on your computer. You can also set a google drive, box, dropbox, or other shared folder as your working directory if you’d like (as long as you are syncing a folder between the cloud and your computer – ASK me if you have questions about this!) b.) Once you navigate to a directory you still need to SET IT as your working directory. You do this in the “More” cog– select “Set as working directory”\n2.) Set working directory with code: We use the ‘setwd()’ function for this. Below is an example. You will need to replace the path details with your own!\n\nsetwd(\"C:/Users/Justin Baumann/Teaching/Bates College/ENV 282 - Research Design in Env Sci\")"
  },
  {
    "objectID": "getting_started.html#to-make-a-quarto-document",
    "href": "getting_started.html#to-make-a-quarto-document",
    "title": "Lab 0: Getting Started",
    "section": "To make a Quarto document",
    "text": "To make a Quarto document\nclick file -&gt; new file -&gt; Quarto document / Complete the pop up prompts and then wait for the document to load. / We want to replace the top bit (our YAML header, everything between the two lines that contains just — at the top) with the following (use your name and title!)\n\n---\ntitle: \"Lab 1: Intro to R, RStudio, and Quarto\"\nauthor: \"Justin Baumann\"\nformat: \n  html:\n    toc: true\n  pdf:\n    toc: true\n    number-sections: true\n    colorlinks: true\neditor: visual\n---"
  },
  {
    "objectID": "getting_started.html#formatting-text",
    "href": "getting_started.html#formatting-text",
    "title": "Lab 0: Getting Started",
    "section": "Formatting text",
    "text": "Formatting text\nUnlike in a regular R script, using the ‘#’ at the start of a line will not comment that line out. Instead, you can type as you would normally in an R Markdown (Rmd) document. We can format our text in the following ways:\n\nBold: ‘’ on either end of a word, phrase, or line will make it bold! this is in bold** =’‘this is in bold’’ without the quotes around the **\n\nLine breaks: DO you want text to be on different lines? Insert a ’’ at the end of a line to make a line break!"
  },
  {
    "objectID": "getting_started.html#making-a-code-chunk",
    "href": "getting_started.html#making-a-code-chunk",
    "title": "Lab 0: Getting Started",
    "section": "Making a code chunk",
    "text": "Making a code chunk\nSince qmd documents are text based, we need to tell RStudio when we want to actually include code. To do this, we will insert a code chunk. To insert a code chunk:\n\n1.) Use the keyboard shortcut ‘ctrl’+‘alt’+‘i’ (PC) or ‘cmd’+‘alt’+‘i’ (Mac) to insert a code chunk.\n\n2.) Navigate to the top bar (of the top left quadrant of RStudio), find “+c” at the right of the bar to insert an R code chink.\nOnce you have a code chunk inserted you will notice that the background of the chunk is gray instead of your default background color (white or black if you are in dark mode)\n\n#this is an example code chunk\n\n# Using '#' at the start of a line indicates a comment, which is not runnable code!"
  },
  {
    "objectID": "getting_started.html#rendering-your-report",
    "href": "getting_started.html#rendering-your-report",
    "title": "Lab 0: Getting Started",
    "section": "Rendering your report",
    "text": "Rendering your report\nTo Visualize what your report will look like, click the ‘visual’ tab in the top bar (on the left). Note that if you do this, it CAN change your code–so be careful. You can also use the GUI to alter your report in the visual tab. This provides a nice alternative to the code based formatting options in the ‘source’ tab.\n\nTo actually render into an html or pdf document, you must click “Render”. You can use the arrow to the right of “Render” to choose render to html or render to pdf. I suggest using HTML most of the time but you can use pdf if you prefer. You will need to successfully Render your quarto document into an html or pdf report in order to turn in your labs!"
  },
  {
    "objectID": "images/Lab 4_ T-tests.html",
    "href": "images/Lab 4_ T-tests.html",
    "title": "Lab 4: T-tests",
    "section": "",
    "text": "IN THIS TUTORIAL YOU WILL LEARN:  1.) The theory behind a T-test and how to perform one  2.) Practice data preparation skills  3.) How to pair graphs and stats to test hypotheses"
  },
  {
    "objectID": "images/Lab 4_ T-tests.html#t-test-theory",
    "href": "images/Lab 4_ T-tests.html#t-test-theory",
    "title": "Lab 4: T-tests",
    "section": "T-test theory",
    "text": "T-test theory\nThe t-test (or students’ t-test) is a basic statistical test used to assess whether or not the means of two groups are different from one another. In this test, the null hypothesis is that the two means are equal (or that there is no difference between the two means).\nA t-test should only be used if the following assumptions are met:  1.) the two distributions whose means we are comparing must be normally distributed  2.) The variances of the two groups must be equal \nGenerate example data\n\niris2&lt;-iris %&gt;%\n  filter(Species != 'setosa') %&gt;%\n  droplevels() #removes the empty levels so when we check levels below we only get the ones that are still in the data!\n\n#check levels to make sure we only have 2 species!\nhead(iris2)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n1          7.0         3.2          4.7         1.4 versicolor\n2          6.4         3.2          4.5         1.5 versicolor\n3          6.9         3.1          4.9         1.5 versicolor\n4          5.5         2.3          4.0         1.3 versicolor\n5          6.5         2.8          4.6         1.5 versicolor\n6          5.7         2.8          4.5         1.3 versicolor\n\nlevels(iris2$Species)\n\n[1] \"versicolor\" \"virginica\" \n\n\nWe will use these data for our examples today. T-test requires only 2 groups/populations. We will assess the alternative hypothesis that one of our numerical variables (sepal length, sepal width, petal length, or petal width) differs by species.\nBut first, we must test our assumptions"
  },
  {
    "objectID": "images/Lab 4_ T-tests.html#assumption-1.-assessing-normality",
    "href": "images/Lab 4_ T-tests.html#assumption-1.-assessing-normality",
    "title": "Lab 4: T-tests",
    "section": "Assumption 1.) Assessing normality",
    "text": "Assumption 1.) Assessing normality\nMethod 1: the Shapiro-Wilk Test If p &lt; 0.05 then the distribution is significantly different from normal.\nStep 1: we need to create separate data frames for each species to assess normality of each variable by species!\n\nversi&lt;-iris2 %&gt;%\n  filter(Species=='versicolor') %&gt;%\n  droplevels()\n\nvirg&lt;-iris2 %&gt;%\n  filter(Species=='virginica') %&gt;%\n  droplevels()\n\n\nStep 2: We can run our shapiro-wilk tests on each variable if we’d like\n\nshapiro.test(versi$Petal.Length) #this is normally distributed\n\n\n    Shapiro-Wilk normality test\n\ndata:  versi$Petal.Length\nW = 0.966, p-value = 0.1585\n\nshapiro.test(versi$Petal.Width) # this is not\n\n\n    Shapiro-Wilk normality test\n\ndata:  versi$Petal.Width\nW = 0.94763, p-value = 0.02728\n\nshapiro.test(versi$Sepal.Length) #normal\n\n\n    Shapiro-Wilk normality test\n\ndata:  versi$Sepal.Length\nW = 0.97784, p-value = 0.4647\n\nshapiro.test(versi$Sepal.Width) #normal\n\n\n    Shapiro-Wilk normality test\n\ndata:  versi$Sepal.Width\nW = 0.97413, p-value = 0.338\n\nshapiro.test(virg$Petal.Length) #normal\n\n\n    Shapiro-Wilk normality test\n\ndata:  virg$Petal.Length\nW = 0.96219, p-value = 0.1098\n\nshapiro.test(virg$Petal.Width) #normal\n\n\n    Shapiro-Wilk normality test\n\ndata:  virg$Petal.Width\nW = 0.95977, p-value = 0.08695\n\nshapiro.test(virg$Sepal.Length) #normal\n\n\n    Shapiro-Wilk normality test\n\ndata:  virg$Sepal.Length\nW = 0.97118, p-value = 0.2583\n\nshapiro.test(virg$Sepal.Width) #normal\n\n\n    Shapiro-Wilk normality test\n\ndata:  virg$Sepal.Width\nW = 0.96739, p-value = 0.1809\n\n\n Method 2: Visualization\nExplore the following visualizations. Do you see clear evidence of normality?\n\na1&lt;-ggplot(data=iris2, aes(Petal.Length, fill=Species))+\n  geom_histogram(binwidth = 0.3)+ \n  facet_wrap(~Species)+\n  theme_classic()+\n  scale_fill_aaas()\n\na2&lt;-ggplot(data=iris2, aes(x=Petal.Length, y=Species, fill=Species))+\n  geom_density_ridges()+ #makes a smooth density curve instead of a histogram!\n  theme_classic()+\n  scale_fill_aaas()\n\na1/a2 #compare the visualizations (they are of the same data)- do we see normality here?\n\nPicking joint bandwidth of 0.206\n\n\n\n\n\n\nb1&lt;-ggplot(data=iris2, aes(Petal.Width, fill=Species))+\n  geom_histogram(binwidth = 0.3)+ \n  facet_wrap(~Species)+\n  theme_classic()+\n  scale_fill_aaas()\n\nb2&lt;-ggplot(data=iris2, aes(x=Petal.Width, y=Species, fill=Species))+\n  geom_density_ridges()+ #makes a smooth density curve instead of a histogram!\n  theme_classic()+\n  scale_fill_aaas()\n\nb1/b2 #compare the visualizations (they are of the same data)- do we see normality here?\n\nPicking joint bandwidth of 0.0972\n\n\n\n\n\n\nc1&lt;-ggplot(data=iris2, aes(Sepal.Width, fill=Species))+\n  geom_histogram(binwidth = 0.3)+ \n  facet_wrap(~Species)+\n  theme_classic()+\n  scale_fill_aaas()\n\nc2&lt;-ggplot(data=iris2, aes(x=Sepal.Width, y=Species, fill=Species))+\n  geom_density_ridges()+ #makes a smooth density curve instead of a histogram!\n  theme_classic()+\n  scale_fill_aaas()\n\nc1/c2 #compare the visualizations (they are of the same data)- do we see normality here?\n\nPicking joint bandwidth of 0.122\n\n\n\n\n\n\nd1&lt;-ggplot(data=iris2, aes(Sepal.Length, fill=Species))+\n  geom_histogram(binwidth = 0.3)+ \n  facet_wrap(~Species)+\n  theme_classic()+\n  scale_fill_aaas()\n\nd2&lt;-ggplot(data=iris2, aes(x=Sepal.Length, y=Species, fill=Species))+\n  geom_density_ridges()+ #makes a smooth density curve instead of a histogram!\n  theme_classic()+\n  scale_fill_aaas()\n\nd1/d2 #compare the visualizations (they are of the same data)- do we see normality here?\n\nPicking joint bandwidth of 0.21"
  },
  {
    "objectID": "images/Lab 4_ T-tests.html#assumption-2.-assessing-equal-variance",
    "href": "images/Lab 4_ T-tests.html#assumption-2.-assessing-equal-variance",
    "title": "Lab 4: T-tests",
    "section": "Assumption 2.) Assessing equal variance",
    "text": "Assumption 2.) Assessing equal variance\nAKA homogeneity of variance \nMethods 1: F-test We will use the F-Test to compare the variance of two populations. This can only be used with 2 populations and is thus only useful when we run a t-test.\nH0 for an F-test is: The variances of the two groups are equal.  Ha: The variances are different  p&lt;0.05 allows us to reject the null (H0) and suggests that the variances are different   note: The F-test assumes our data are already normal! You should not run it on non-normal data\n\n#we use var.test to run an F-test\nf1&lt;- var.test(Petal.Length ~ Species, data=iris2)\nf1 # p&gt;0.05, so we fail to reject H0 (the variances are likely equal)\n\n\n    F test to compare two variances\n\ndata:  Petal.Length by Species\nF = 0.72497, num df = 49, denom df = 49, p-value = 0.2637\nalternative hypothesis: true ratio of variances is not equal to 1\n95 percent confidence interval:\n 0.411402 1.277530\nsample estimates:\nratio of variances \n         0.7249678 \n\nf2&lt;- var.test(Petal.Width ~ Species, data=iris2)\nf2 # p&lt;0.05, so we reject H0 (variances are likely different)\n\n\n    F test to compare two variances\n\ndata:  Petal.Width by Species\nF = 0.51842, num df = 49, denom df = 49, p-value = 0.02335\nalternative hypothesis: true ratio of variances is not equal to 1\n95 percent confidence interval:\n 0.2941935 0.9135614\nsample estimates:\nratio of variances \n         0.5184243 \n\nf3&lt;- var.test(Sepal.Length ~ Species, data=iris2)\nf3 # p&gt;0.05, so we fail to reject H0 (the variances are likely equal)\n\n\n    F test to compare two variances\n\ndata:  Sepal.Length by Species\nF = 0.65893, num df = 49, denom df = 49, p-value = 0.1478\nalternative hypothesis: true ratio of variances is not equal to 1\n95 percent confidence interval:\n 0.3739257 1.1611546\nsample estimates:\nratio of variances \n         0.6589276 \n\nf4&lt;- var.test(Sepal.Width ~ Species, data=iris2)\nf4 # p&gt;0.05, so we fail to reject H0 (the variances are likely equal)\n\n\n    F test to compare two variances\n\ndata:  Sepal.Width by Species\nF = 0.94678, num df = 49, denom df = 49, p-value = 0.849\nalternative hypothesis: true ratio of variances is not equal to 1\n95 percent confidence interval:\n 0.5372773 1.6684117\nsample estimates:\nratio of variances \n         0.9467839 \n\n\n Method 2: Levene Test  A more flexible test of homogeneity of variance is the Levene Test. It can be used to compare the variance of many populations (not just 2) and is more flexible than the F-test, so it can be used even if the normality assumption is violated.  this is the most commonly used test for homogeneity of variance  leveneTest() is in the car package in R! \nN0: Variances of all populationos are equal  p&lt;0.05 allows us to reject H0\n\nl1&lt;- leveneTest(Petal.Length ~ Species, data=iris2)\nl1 # p&gt;0.05, so we fail to reject H0 (the variances are likely equal)\n\nLevene's Test for Homogeneity of Variance (center = median)\n      Df F value Pr(&gt;F)\ngroup  1  1.0674 0.3041\n      98               \n\nl2&lt;- leveneTest(Petal.Width ~ Species, data=iris2)\nl2 # p&lt;0.05, so we reject H0 (variances are likely different)\n\nLevene's Test for Homogeneity of Variance (center = median)\n      Df F value  Pr(&gt;F)  \ngroup  1  6.5455 0.01205 *\n      98                  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nl3&lt;- leveneTest(Sepal.Length ~ Species, data=iris2)\nl3 # p&gt;0.05, so we fail to reject H0 (the variances are likely equal)\n\nLevene's Test for Homogeneity of Variance (center = median)\n      Df F value Pr(&gt;F)\ngroup  1  1.0245 0.3139\n      98               \n\nl4&lt;- leveneTest(Sepal.Width ~ Species, data=iris2)\nl4 # p&gt;0.05, so we fail to reject H0 (the variances are likely equal)\n\nLevene's Test for Homogeneity of Variance (center = median)\n      Df F value Pr(&gt;F)\ngroup  1  0.0873 0.7683\n      98               \n\n\n Method 3: Visualization  Since p-values are more like guidelines, we also want to visualize our data to assess homogeniety of variance. We can do that in several ways. You might already have some ideas about this! In general, it seems smart to display the raw data as points and as boxplots. Let’s start there!\n\nv1.1&lt;-ggplot(data=iris2, aes(x=Species, y=Petal.Length, color=Species))+\n  geom_point()+\n  theme_classic()+\n  scale_color_aaas()\n\nv1.2&lt;-ggplot(data=iris2, aes(x=Species, y=Petal.Length, color=Species))+\n  geom_boxplot()+\n  theme_classic()+\n  scale_color_aaas()\n\nv1.1+v1.2\n\n\n\n\n\nv2.1&lt;-ggplot(data=iris2, aes(x=Species, y=Petal.Width, color=Species))+\n  geom_point()+\n  theme_classic()+\n  scale_color_aaas()\n\nv2.2&lt;-ggplot(data=iris2, aes(x=Species, y=Petal.Width, color=Species))+\n  geom_boxplot()+\n  theme_classic()+\n  scale_color_aaas()\n\nv2.1+v2.2\n\n\n\n\n\nv3.1&lt;-ggplot(data=iris2, aes(x=Species, y=Sepal.Width, color=Species))+\n  geom_point()+\n  theme_classic()+\n  scale_color_aaas()\n\nv3.2&lt;-ggplot(data=iris2, aes(x=Species, y=Sepal.Width, color=Species))+\n  geom_boxplot()+\n  theme_classic()+\n  scale_color_aaas()\n\nv3.1+v3.2\n\n\n\n\n\nv4.1&lt;-ggplot(data=iris2, aes(x=Species, y=Sepal.Length, color=Species))+\n  geom_point()+\n  theme_classic()+\n  scale_color_aaas()\n\nv4.2&lt;-ggplot(data=iris2, aes(x=Species, y=Sepal.Length, color=Species))+\n  geom_boxplot()+\n  theme_classic()+\n  scale_color_aaas()\n\nv4.1+v4.2"
  },
  {
    "objectID": "images/Lab 4_ T-tests.html#when-can-we-ignore-assumptions",
    "href": "images/Lab 4_ T-tests.html#when-can-we-ignore-assumptions",
    "title": "Lab 4: T-tests",
    "section": "When can we ignore assumptions?",
    "text": "When can we ignore assumptions?\nWe can if our sample sizes are large. If n is small, we should not ignore this assumption. There are alternatives to dealing with normality that we can discuss in the ANOVA section (such as transforming the data)\nFor more info on that\nWe can also ignore the equal variance requirement if we use the Welch t-test (default in R)"
  },
  {
    "objectID": "images/Lab 4_ T-tests.html#a-basic-t-test-in-r",
    "href": "images/Lab 4_ T-tests.html#a-basic-t-test-in-r",
    "title": "Lab 4: T-tests",
    "section": "A basic T-test in R",
    "text": "A basic T-test in R\nFinally, let’s do some T-tests! \nH0: No difference between the means of the 2 populations p&lt;0.05 allows us to reject this H0 (indicating a likely difference)\nStep 1: Calculate means and error and plot!\n\nmeaniris&lt;-iris2 %&gt;%\n  group_by(Species) %&gt;%\n  summarize(meanpl=mean(Petal.Length), sdpl=sd(Petal.Length), n=n(), sepl=sdpl/sqrt(n), meanpw=mean(Petal.Width), sdpw=sd(Petal.Width), n=n(), sepw=sdpw/sqrt(n), meansl=mean(Sepal.Length), sdsl=sd(Sepal.Length), n=n(), sesl=sdpl/sqrt(n), meansw=mean(Sepal.Width), sdsw=sd(Sepal.Width), n=n(), sesw=sdsw/sqrt(n))\n\nmeaniris\n\n# A tibble: 2 × 14\n  Species    meanpl  sdpl     n   sepl meanpw  sdpw   sepw meansl  sdsl   sesl\n  &lt;fct&gt;       &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;\n1 versicolor   4.26 0.470    50 0.0665   1.33 0.198 0.0280   5.94 0.516 0.0665\n2 virginica    5.55 0.552    50 0.0780   2.03 0.275 0.0388   6.59 0.636 0.0780\n# ℹ 3 more variables: meansw &lt;dbl&gt;, sdsw &lt;dbl&gt;, sesw &lt;dbl&gt;\n\n\n\n\np1&lt;-ggplot(meaniris, aes(x=Species, y=meanpl, color=Species))+\n  geom_point()+\n  geom_errorbar(aes(x=Species, ymin=meanpl-sepl, ymax=meanpl+sepl), width=0.2)+\n  scale_color_aaas()+\n  theme_classic()+\n  labs(title='Petal Length')\n\np2&lt;-ggplot(meaniris, aes(x=Species, y=meanpw, color=Species))+\n  geom_point()+\n  geom_errorbar(aes(x=Species, ymin=meanpw-sepw, ymax=meanpw+sepw), width=0.2)+\n  scale_color_aaas()+\n  theme_classic()+\n  labs(title='Petal Width')\n\np3&lt;-ggplot(meaniris, aes(x=Species, y=meansl, color=Species))+\n  geom_point()+\n  geom_errorbar(aes(x=Species, ymin=meansl-sesl, ymax=meansl+sesl), width=0.2)+\n  scale_color_aaas()+\n  theme_classic()+\n  labs(title='Sepal Length')\n\np4&lt;-ggplot(meaniris, aes(x=Species, y=meansw, color=Species))+\n  geom_point()+\n  geom_errorbar(aes(x=Species, ymin=meansw-sesw, ymax=meansw+sesw), width=0.2)+\n  scale_color_aaas()+\n  theme_classic()+\n  labs(title='Sepal Width')\n\n(p1+p2)/(p3+p4)\n\n\n\n\nDoes Petal Length differ by species?\n\nt1&lt;-t.test(data=iris2, Petal.Length~Species, alternative='two.sided', var.equal=FALSE) #two.sided and var.equal= FALSE are default, so we don't have to list them. BUt, we can also change them (as I will show later)\n\nt1 #p&lt;0.05 suggests that there is a significant difference in petal length between species\n\n\n    Welch Two Sample t-test\n\ndata:  Petal.Length by Species\nt = -12.604, df = 95.57, p-value &lt; 2.2e-16\nalternative hypothesis: true difference in means between group versicolor and group virginica is not equal to 0\n95 percent confidence interval:\n -1.49549 -1.08851\nsample estimates:\nmean in group versicolor  mean in group virginica \n                   4.260                    5.552 \n\n\n Our p&lt;0.05 suggests that there is a significant effect of species on petal length (petal length differs by species). BUT, do we get a clear explanation of which group is higher or lower? Look at the Welch T-test output and you can see the means! You can also use the graph we made to visualize this!\nDoes Petal Width differ by species?\n\nt2&lt;-t.test(data=iris2, Petal.Width~Species, alternative='two.sided', var.equal=FALSE) #two.sided and var.equal= FALSE are default, so we don't have to list them. BUt, we can also change them (as I will show later)\n\nt2\n\n\n    Welch Two Sample t-test\n\ndata:  Petal.Width by Species\nt = -14.625, df = 89.043, p-value &lt; 2.2e-16\nalternative hypothesis: true difference in means between group versicolor and group virginica is not equal to 0\n95 percent confidence interval:\n -0.7951002 -0.6048998\nsample estimates:\nmean in group versicolor  mean in group virginica \n                   1.326                    2.026 \n\n\n Does Sepal Width differ between species?\n\nt3&lt;-t.test(data=iris2, Sepal.Width~Species, alternative='two.sided', var.equal=FALSE) #two.sided and var.equal= FALSE are default, so we don't have to list them. BUt, we can also change them (as I will show later)\n\nt3\n\n\n    Welch Two Sample t-test\n\ndata:  Sepal.Width by Species\nt = -3.2058, df = 97.927, p-value = 0.001819\nalternative hypothesis: true difference in means between group versicolor and group virginica is not equal to 0\n95 percent confidence interval:\n -0.33028364 -0.07771636\nsample estimates:\nmean in group versicolor  mean in group virginica \n                   2.770                    2.974 \n\n\n Does Sepal Length differ between species?\n\nt4&lt;-t.test(data=iris2, Sepal.Length~Species, alternative='two.sided', var.equal=FALSE) #two.sided and var.equal= FALSE are default, so we don't have to list them. BUt, we can also change them (as I will show later)\n\nt4\n\n\n    Welch Two Sample t-test\n\ndata:  Sepal.Length by Species\nt = -5.6292, df = 94.025, p-value = 1.866e-07\nalternative hypothesis: true difference in means between group versicolor and group virginica is not equal to 0\n95 percent confidence interval:\n -0.8819731 -0.4220269\nsample estimates:\nmean in group versicolor  mean in group virginica \n                   5.936                    6.588 \n\n\nSO, when is a t-test actually useful and when isn’t it? We use a T-test ONLY when we want to compare two means / two populations. If we have more than 2 groups, a T-test is not appropriate! Instead, we need to use an analysis of variance (ANOVA) or possibly something more complex!"
  },
  {
    "objectID": "getting_started.html#install-r-and-rstudio.-get-rstudio-running-on-your-computer-and-get-familiar-with-the-layout.",
    "href": "getting_started.html#install-r-and-rstudio.-get-rstudio-running-on-your-computer-and-get-familiar-with-the-layout.",
    "title": "Lab 0: Getting Started",
    "section": "1. Install R and Rstudio. Get Rstudio running on your computer and get familiar with the layout.",
    "text": "1. Install R and Rstudio. Get Rstudio running on your computer and get familiar with the layout."
  },
  {
    "objectID": "getting_started.html#make-a-folder-directory-on-your-computer-for-this-course-and-then-make-an-rstudio-project-for-this-course-that-runs-from-that-folder",
    "href": "getting_started.html#make-a-folder-directory-on-your-computer-for-this-course-and-then-make-an-rstudio-project-for-this-course-that-runs-from-that-folder",
    "title": "Lab 0: Getting Started",
    "section": "2. Make a folder (directory) on your computer for this course and then make an Rstudio project for this course that runs from that folder",
    "text": "2. Make a folder (directory) on your computer for this course and then make an Rstudio project for this course that runs from that folder"
  },
  {
    "objectID": "getting_started.html#make-a-new-quarto-document-this-is-where-you-will-do-the-lab-assignment-that-you-will-turn-in.-make-a-title-and-subject-headers-for-each-question.-copy-the-instructions-and-then-add-your-work-below.-make-the-question-numbers-bold.-for-numberr-1-install-rstudio--write-me-a-short-description-of-what-you-did-i.e.-i-installed-r-and-rstudio-following-this-tutorial-where-this-is-a-hyperlink-to-the-tutorial-you-used-this-lab-for-example.-for-number-2-set-your-folder-for-this-class-as-your-working-directory.-navigate-to-it-in-the-files-tab-on-rstudio.-take-a-screenshot-and-insert-that-screenshot-as-an-image-into-your-quarto-doc.",
    "href": "getting_started.html#make-a-new-quarto-document-this-is-where-you-will-do-the-lab-assignment-that-you-will-turn-in.-make-a-title-and-subject-headers-for-each-question.-copy-the-instructions-and-then-add-your-work-below.-make-the-question-numbers-bold.-for-numberr-1-install-rstudio--write-me-a-short-description-of-what-you-did-i.e.-i-installed-r-and-rstudio-following-this-tutorial-where-this-is-a-hyperlink-to-the-tutorial-you-used-this-lab-for-example.-for-number-2-set-your-folder-for-this-class-as-your-working-directory.-navigate-to-it-in-the-files-tab-on-rstudio.-take-a-screenshot-and-insert-that-screenshot-as-an-image-into-your-quarto-doc.",
    "title": "Lab 0: Getting Started",
    "section": "3. Make a new quarto document, this is where you will do the lab assignment that you will turn in. Make a title and subject headers for each question. Copy the instructions and then add your work below. Make the question numbers bold. For numberr 1 (install Rstudio)- write me a short description of what you did (i.e.: “I installed R and Rstudio following this tutorial”), where “this” is a hyperlink to the tutorial you used (this lab, for example). For number 2: Set your folder for this class as your working directory. Navigate to it in the “files” tab on Rstudio. Take a screenshot and insert that screenshot as an image into your quarto doc.",
    "text": "3. Make a new quarto document, this is where you will do the lab assignment that you will turn in. Make a title and subject headers for each question. Copy the instructions and then add your work below. Make the question numbers bold. For numberr 1 (install Rstudio)- write me a short description of what you did (i.e.: “I installed R and Rstudio following this tutorial”), where “this” is a hyperlink to the tutorial you used (this lab, for example). For number 2: Set your folder for this class as your working directory. Navigate to it in the “files” tab on Rstudio. Take a screenshot and insert that screenshot as an image into your quarto doc."
  },
  {
    "objectID": "getting_started.html#install-the-following-packages-tidyverse-lubridate-performance-palmerpenguins-patchwork-ggsci.-once-installed-load-them-using-library-in-a-code-chunk-in-your-quarto-doc.-remember-that-we-generally-want-to-load-packages-and-any-data-at-the-top-of-our-quarto-doc-but-for-this-assignment-we-will-just-do-it-in-section-4.",
    "href": "getting_started.html#install-the-following-packages-tidyverse-lubridate-performance-palmerpenguins-patchwork-ggsci.-once-installed-load-them-using-library-in-a-code-chunk-in-your-quarto-doc.-remember-that-we-generally-want-to-load-packages-and-any-data-at-the-top-of-our-quarto-doc-but-for-this-assignment-we-will-just-do-it-in-section-4.",
    "title": "Lab 0: Getting Started",
    "section": "4. Install the following packages: Tidyverse, lubridate, performance, palmerpenguins, patchwork, ggsci. Once installed, load them (using library()) in a code chunk in your quarto doc. remember that we generally want to load packages and any data at the top of our quarto doc, but for this assignment we will just do it in section 4.",
    "text": "4. Install the following packages: Tidyverse, lubridate, performance, palmerpenguins, patchwork, ggsci. Once installed, load them (using library()) in a code chunk in your quarto doc. remember that we generally want to load packages and any data at the top of our quarto doc, but for this assignment we will just do it in section 4."
  },
  {
    "objectID": "getting_started.html#read-in-these-data-and-take-a-look-at-the-shape-of-the-data-using-head-tail-str",
    "href": "getting_started.html#read-in-these-data-and-take-a-look-at-the-shape-of-the-data-using-head-tail-str",
    "title": "Lab 0: Getting Started",
    "section": "5. Read in THESE data and take a look at the shape of the data using head, tail, str,",
    "text": "5. Read in THESE data and take a look at the shape of the data using head, tail, str,"
  },
  {
    "objectID": "Lab_1.html",
    "href": "Lab_1.html",
    "title": "Lab 1: Intro to Data Wrangling",
    "section": "",
    "text": "Learning Objectives\nIn this tutorial we will learn:\n1.) Basic data wrangling functions in the tidyverse framework\n2.) Pivoting data\n3.) How to deal with date / time formats in R\n\n\n\n1.) Introduction to the Tidyverse\nThe Tidyverse is a collection of R packages that can be used together for many different data science practices. They share syntax and are very versatile. For most users, the Tidyverse provides a structure of “best practices” that will allow a user to do just about anything with data.\nWe can load the Tidyverse as a single package in R:\n\nlibrary(tidyverse)\n\nThe tidyverse package contains the following packages: 1.) ggplot2: the best graphing package in R\n2.) dplyr: most of our data wrangling tools come from here\n3.) tidyr: tools for data tidying (cleaning, reshaping)\n4.) readr: tools for reading in different types of data – this is where the read_csv() function comes from\n5.) purrr: tools for working with functions and vectors (useful but likely not right away for beginners)\n6.) stringr: functions to help us work with strings (like sentences, paragraphs, lists, etc)\n7.) forcats: “for categories” - makes working with factors (categorical data) easier!\nLearn more about the Tidyverse\nThis section contains some worked examples of Tidyverse best practices for data manipulation. If you just want a quick refresher, you can take a look at the cheat sheet below!\n\n\n\n\n2.) Prepare data for wrangling\n\nRead in some dataload the data\n\n\nWe can mess with a few data sets that are built into R or into R packages.\nA common one is mtcars, which is part of base R (attributes of a bunch of cars)\n\nhead(mtcars)\n\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n\n\nAnother fun one is CO2, which is also part of base R (CO2 uptake from different plants). Note: co2 (no caps) is also a dataset in R. It’s just the CO2 concentration at Maona Loa observatory every year (as a list).\n\nhead(CO2)\n\n  Plant   Type  Treatment conc uptake\n1   Qn1 Quebec nonchilled   95   16.0\n2   Qn1 Quebec nonchilled  175   30.4\n3   Qn1 Quebec nonchilled  250   34.8\n4   Qn1 Quebec nonchilled  350   37.2\n5   Qn1 Quebec nonchilled  500   35.3\n6   Qn1 Quebec nonchilled  675   39.2\n\n\nYou are welcome to use these to practice with or you can choose from any of the datasets in the ‘datasets’ or ‘MASS’ packages (you have to load the package to get the datasets).\nYou can also load in your own data or pick something from online, as we learned how to do last time.\nLet’s stick with what we know for now– I will use the penguins data from the palmerpenguins package\n\n\n\nlibrary(palmerpenguins)\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nadd the dataframe to our environment As you learned in the Rstudio basics tutorial above, one of the four main panels of the RStudio window contains the Environment tab. In this tab, we can see data that are stored locally in our session of R. While penguins is pre-loaded in R, it is nice to make a local copy so we can modify it easily.\nHere’s how we do that:\n\npenguins&lt;-penguins \n\nHere, the name of the new dataframe we want in our environment is to the left of the arrow and the name of the object we are calling is to the right. In simpler terms, we are defining a new dataframe called penguins (or any name we want) and it is defined as just an exact copy of penguins (the object that is already defined within palmerpenguins. This is the simplest example – we will quickly move on to more complex things. You will see that when you run this the dataframe ‘penguins’ appears in the local environment. You can call your local file anything you want, it does not need to be an exact copy of the orignal name! Choose names that are meaningful to you, but keep the names short and avoid spaces and other special characters as much as possible.\n\n\n\n\n\n3.) Tidyverse data wrangling\n\nSelect or remove columns/rowsSubsetting and filtering dataAdd new columns or change existing onesPivot data (wide to long / long to wide)\n\n\nLet’s look at penguins\n\nhead(penguins)\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nNow let’s say we only really care about species and bill length. We can select those columns to keep and remove the rest of the columns because they are just clutter at this point. There are two ways we can do this: 1.) Select the columns we want to keep 2.) Select the columns we want to remove\nHere are two ways to do that:\nBase R example For those with some coding experience you may like this method as this syntax is common in other coding languages\nStep 1.) Count the column numbers. Column 1 is the left most column. Remember we can use ncol() to count the total number of columns (useful when we have a huge number of columns)\n\nncol(penguins) # we have 8 columns\n\n[1] 8\n\n\nSpecies is column 1 and bill length is column 3. Those are the only columns we want!\nStep 2.) Select columns we want to keep using bracket syntax. Here we wil use this basic syntax: df[rows, columns] We can input the rows and/or columns we want inside our brackets. If we want more than 1 row or column we will need to use a ‘c()’ for concatenate (combine). To select just species and bill length we would do the following:\n\nhead(penguins[,c(1,3)]) #Selecting NO specific rows and 2 columns (numbers 1 and 3)\n\n# A tibble: 6 × 2\n  species bill_length_mm\n  &lt;fct&gt;            &lt;dbl&gt;\n1 Adelie            39.1\n2 Adelie            39.5\n3 Adelie            40.3\n4 Adelie            NA  \n5 Adelie            36.7\n6 Adelie            39.3\n\n\nIMPORTANT When we do this kind of manipulation it is super helpful to NAME the output. In the above example I didn’t do that. If I don’t name the output I cannot easily call it later. If I do name it, I can use it later and see it in my ‘Environment’ tab. So, I should do this:\n\npens&lt;-penguins[,c(1,3)]\nhead(pens)\n\n# A tibble: 6 × 2\n  species bill_length_mm\n  &lt;fct&gt;            &lt;dbl&gt;\n1 Adelie            39.1\n2 Adelie            39.5\n3 Adelie            40.3\n4 Adelie            NA  \n5 Adelie            36.7\n6 Adelie            39.3\n\n\nNow, here’s how you do the same selection step by removing the columns you DO NOT want.\n\npens2&lt;-penguins[,-c(2,4:8)] #NOTE that ':' is just shorthand for all columns between 4 and 8. I could also use -c(2,4,5,6,7,8)\nhead(pens2)\n\n# A tibble: 6 × 2\n  species bill_length_mm\n  &lt;fct&gt;            &lt;dbl&gt;\n1 Adelie            39.1\n2 Adelie            39.5\n3 Adelie            40.3\n4 Adelie            NA  \n5 Adelie            36.7\n6 Adelie            39.3\n\n\n\nTidyverse example (select())\nPerhaps that example above was a little confusing? This is why we like Tidyverse! We can do the same thing using the select() function in Tidyverse and it is easier!\nI still want just species and bill length. Here’s how I select them:\n\nhead(select(penguins, species, bill_length_mm))\n\n# A tibble: 6 × 2\n  species bill_length_mm\n  &lt;fct&gt;            &lt;dbl&gt;\n1 Adelie            39.1\n2 Adelie            39.5\n3 Adelie            40.3\n4 Adelie            NA  \n5 Adelie            36.7\n6 Adelie            39.3\n\n\nEASY. Don’t forget to name the output for use later :)\nLike this:\n\nshortpen&lt;-select(penguins, species, bill_length_mm)\nhead(shortpen)\n\n# A tibble: 6 × 2\n  species bill_length_mm\n  &lt;fct&gt;            &lt;dbl&gt;\n1 Adelie            39.1\n2 Adelie            39.5\n3 Adelie            40.3\n4 Adelie            NA  \n5 Adelie            36.7\n6 Adelie            39.3\n\n\n\n\n\nSometimes we only want to look at data from a subset of the data frame\n\nFor example, maybe we only want to examine data from chinstrap penguins in the penguins data. OR perhaps we only care about 4 cylinder cars in mtcars. We can filter out the data we don’t want easily using Tidyverse (filter) or base R (subset)\nTidyverse example - Using filter()\nLet’s go ahead and filter the penguins data to only include chinstraps and the mtcars data to only include 4 cylinder cars\nThe syntax for filter is: filter(df, column =&gt;&lt;== number or factor)\n\n#filter penguins to only contain chinstrap\nchins&lt;-filter(penguins, species=='Chinstrap')\nhead(chins)\n\n# A tibble: 6 × 8\n  species   island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;     &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Chinstrap Dream            46.5          17.9               192        3500\n2 Chinstrap Dream            50            19.5               196        3900\n3 Chinstrap Dream            51.3          19.2               193        3650\n4 Chinstrap Dream            45.4          18.7               188        3525\n5 Chinstrap Dream            52.7          19.8               197        3725\n6 Chinstrap Dream            45.2          17.8               198        3950\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n#confirm that we only have chinstraps\nchins$species\n\n [1] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap\n [8] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap\n[15] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap\n[22] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap\n[29] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap\n[36] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap\n[43] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap\n[50] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap\n[57] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap\n[64] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap\nLevels: Adelie Chinstrap Gentoo\n\n\nNow for mtcars…\n\n#filter mtcars to only contain 4 cylinder cars\ncars4cyl&lt;-filter(mtcars, cyl == \"4\")\nhead(cars4cyl)\n\n                mpg cyl  disp hp drat    wt  qsec vs am gear carb\nDatsun 710     22.8   4 108.0 93 3.85 2.320 18.61  1  1    4    1\nMerc 240D      24.4   4 146.7 62 3.69 3.190 20.00  1  0    4    2\nMerc 230       22.8   4 140.8 95 3.92 3.150 22.90  1  0    4    2\nFiat 128       32.4   4  78.7 66 4.08 2.200 19.47  1  1    4    1\nHonda Civic    30.4   4  75.7 52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla 33.9   4  71.1 65 4.22 1.835 19.90  1  1    4    1\n\n#confirm it worked\nstr(cars4cyl) #str shows us the observations and variables in each column\n\n'data.frame':   11 obs. of  11 variables:\n $ mpg : num  22.8 24.4 22.8 32.4 30.4 33.9 21.5 27.3 26 30.4 ...\n $ cyl : num  4 4 4 4 4 4 4 4 4 4 ...\n $ disp: num  108 146.7 140.8 78.7 75.7 ...\n $ hp  : num  93 62 95 66 52 65 97 66 91 113 ...\n $ drat: num  3.85 3.69 3.92 4.08 4.93 4.22 3.7 4.08 4.43 3.77 ...\n $ wt  : num  2.32 3.19 3.15 2.2 1.61 ...\n $ qsec: num  18.6 20 22.9 19.5 18.5 ...\n $ vs  : num  1 1 1 1 1 1 1 1 0 1 ...\n $ am  : num  1 0 0 1 1 1 0 1 1 1 ...\n $ gear: num  4 4 4 4 4 4 3 4 5 5 ...\n $ carb: num  1 2 2 1 2 1 1 1 2 2 ...\n\ncars4cyl$cyl #shows us only the observations in the cyl column!\n\n [1] 4 4 4 4 4 4 4 4 4 4 4\n\n\nBase R example (subset) In this case, the subset() function that is in base R works almost exactly like the filter() function. You can essentially use them interchangably.\n\n#subset mtcars to include only 4 cylinder cars\ncars4cyl2.0&lt;-subset(mtcars, cyl=='4')\ncars4cyl2.0\n\n                mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nDatsun 710     22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nMerc 240D      24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230       22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nFiat 128       32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona  21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nFiat X1-9      27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa   30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nVolvo 142E     21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n\n\n\n\n\nAdding a new column Sometimes we may want to do some math on a column (or a series of columns). Maybe we want to calculate a ratio, volume, or area. Maybe we just want to scale a variable by taking the log or changing it from cm to mm. We can do all of this with the mutate() function in Tidyverse!\n\n#convert bill length to cm (and make a new column)\nhead(penguins)\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\nmutpen&lt;-(mutate(penguins, bill_length_cm=bill_length_mm/10))\nhead(mutpen)         \n\n# A tibble: 6 × 9\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 3 more variables: sex &lt;fct&gt;, year &lt;int&gt;, bill_length_cm &lt;dbl&gt;\n\n\nChange existing column The code above makes a new column in which bill length in cm is added as a new column to the data frame. We could have also just done the math in the original column if we wanted. That would look like this:\n\nhead(penguins)\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\nmutpen&lt;-(mutate(penguins, bill_length_mm=bill_length_mm/10))\nhead(mutpen) \n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           3.91          18.7               181        3750\n2 Adelie  Torgersen           3.95          17.4               186        3800\n3 Adelie  Torgersen           4.03          18                 195        3250\n4 Adelie  Torgersen          NA             NA                  NA          NA\n5 Adelie  Torgersen           3.67          19.3               193        3450\n6 Adelie  Torgersen           3.93          20.6               190        3650\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nNOTE This is misleading because now the values in bill_length_mm are in cm. Thus, it was better to just make a new column in this case. But you don’t have to make a new column every time if you would prefer not to. Just be careful.\nColumn math in Base R Column manipulation is easy enough in base R as well. We can do the same thing we did above without Tidyverse like this:\n\npenguins$bill_length_cm = penguins$bill_length_mm /10\nhead(penguins)\n\n# A tibble: 6 × 9\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 3 more variables: sex &lt;fct&gt;, year &lt;int&gt;, bill_length_cm &lt;dbl&gt;\n\n\n\n\n‘Pivoting’ data means changing the format of the data. Tidyverse and ggplot in particular tend to like data in ‘long’ format. Long format means few columns and many rows. Wide format is the opposite- many columns and fewer rows.\nWide format is usually how the human brain organizes data. For example, a spreadsheet in which every species is in its own column is wide format. You might take this sheet to the field and record present/absence or count of each species at each site or something. This is great but it might be easier for us to calculate averages or do group based analysis in R if we have a column called ‘species’ in which every single species observation is a row. This leads to A LOT of repeated categorical variables (site, date, etc), which is fine.\nExample of Long Format The built in dataset ‘fish_encounters’ is a simple example of long format data. Penguins, iris, and others are also in long format but are more complex\n\nhead(fish_encounters) # here we see 3 columns that track each fish (column 1) across MANY stations (column 2) \n\n# A tibble: 6 × 3\n  fish  station  seen\n  &lt;fct&gt; &lt;fct&gt;   &lt;int&gt;\n1 4842  Release     1\n2 4842  I80_1       1\n3 4842  Lisbon      1\n4 4842  Rstr        1\n5 4842  Base_TD     1\n6 4842  BCE         1\n\n\nConverting from long to wide using pivot_wider (Tidyverse) Although we know that long format is preferred for working in Tidyverse and doing graphing and data analysis in R, we sometimes do want data to be in wide format. There are certain functions and operations that may require wide format. This is also the format that we are most likely to use in the field. So, let’s convert fish_encounters back to what it likely was when the data were recorded in the field…\n\n#penguins long to wide using pivot_wider\n\nwidefish&lt;-fish_encounters %&gt;%\n  pivot_wider(names_from= station, values_from = seen)\n\nhead(widefish)\n\n# A tibble: 6 × 12\n  fish  Release I80_1 Lisbon  Rstr Base_TD   BCE   BCW  BCE2  BCW2   MAE   MAW\n  &lt;fct&gt;   &lt;int&gt; &lt;int&gt;  &lt;int&gt; &lt;int&gt;   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n1 4842        1     1      1     1       1     1     1     1     1     1     1\n2 4843        1     1      1     1       1     1     1     1     1     1     1\n3 4844        1     1      1     1       1     1     1     1     1     1     1\n4 4845        1     1      1     1       1    NA    NA    NA    NA    NA    NA\n5 4847        1     1      1    NA      NA    NA    NA    NA    NA    NA    NA\n6 4848        1     1      1     1      NA    NA    NA    NA    NA    NA    NA\n\n\nThe resulting data frame above is a wide version of the orignal in which each station now has its own column. This is likely how we would record the data in the field!\nExample of Wide Format Data Let’s just use widefish for this since we just made it into wide format :)\n\nhead(widefish)\n\n# A tibble: 6 × 12\n  fish  Release I80_1 Lisbon  Rstr Base_TD   BCE   BCW  BCE2  BCW2   MAE   MAW\n  &lt;fct&gt;   &lt;int&gt; &lt;int&gt;  &lt;int&gt; &lt;int&gt;   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n1 4842        1     1      1     1       1     1     1     1     1     1     1\n2 4843        1     1      1     1       1     1     1     1     1     1     1\n3 4844        1     1      1     1       1     1     1     1     1     1     1\n4 4845        1     1      1     1       1    NA    NA    NA    NA    NA    NA\n5 4847        1     1      1    NA      NA    NA    NA    NA    NA    NA    NA\n6 4848        1     1      1     1      NA    NA    NA    NA    NA    NA    NA\n\n\nConverting from Wide to Long using pivot_longer (Tidyverse)\n\nlongfish&lt;- widefish %&gt;%\n  pivot_longer(!fish, names_to = 'station', values_to = 'seen')\n\nhead(longfish)\n\n# A tibble: 6 × 3\n  fish  station  seen\n  &lt;fct&gt; &lt;chr&gt;   &lt;int&gt;\n1 4842  Release     1\n2 4842  I80_1       1\n3 4842  Lisbon      1\n4 4842  Rstr        1\n5 4842  Base_TD     1\n6 4842  BCE         1\n\n\nAnd now we are back to our original data frame! The ‘!fish’ means simply that we do not wish to pivot the fish column. It remains unchanged. A ‘!’ before something in code usually means to exclude or remove. We’ve used names_to and values_to to give names to our new columns. pivot_longer will look for factors and put those in the names_to column and it will look for values (numeric) to pupt in the values_to column.\nNOTES There are MANY other ways to modify pivot_wider() and pivot_longer(). I encourage you to look in the help tab, the tidyR/ Tidyverse documentation online, and for other examples on google and stack overflow.\n\n\n\n\n\n\n4.) Dealing with Date and Time in R\nDate and time are often important variables in scientific data analysis. We are often interested in change over time and we also often do time series sampling. Learning how to manage dates and times in R is essential! Luckily, there is a user friendly and tidyverse friendly package that can help us with dates, times, and datetimes. That package is called ‘lubridate’ and we will learn all about it below.\nFirst, we need to load packages (**NOTE: It is BEST to load all packages that you need for an entire script or .qmd at the top of the document). Here, we just need to add the lubridate package. Keep in mind that you may need to install it first if you have not yet done so.\n\nlibrary(lubridate)\n\n\nDate and Time in RRead in some data to practice withChange date column (factor) to date/time formatWhy this matters\n\n\nR and really all programming languages have a difficult time with dates and times. Luckily, programmers have developed ways to get computer to understand dates and times as time series (so we can plot them on a graph axis and do analysis, for example).\nThere are several common formats of date and time that we don’t need to get into, but for many tools we use in the field we have a timestamp that includes day, month, year, and time (hours, minutes, and maybe seconds). When all of that info ends up in 1 column of a .csv it can be annoying and difficult to get R to understand what that column means. There are tons of ways to solve this problem but the easiest is definitely to just use some simple functions in the Lubridate package!\n\n\n\ndat&lt;-read.csv('https://raw.githubusercontent.com/jbaumann3/Intro-to-R-for-Ecology/main/final_bucket_mesocosm_apex_data.csv')\nhead(dat) #take a look at the data to see how it is formatted\n\n  X                date probe_name probe_type value\n1 1 07/01/2021 00:00:00      B2_T2       Temp 18.10\n2 2 07/01/2021 00:00:00     B2_pH2         pH  4.53\n3 3 07/01/2021 00:00:00     B1_pH2         pH  8.12\n4 4 07/01/2021 00:00:00      B1_T2       Temp 17.70\n5 5 07/01/2021 00:00:00      B1_T1       Temp 17.70\n6 6 07/01/2021 00:00:00     B1_pH1         pH  8.12\n\nstr(dat) #what are the attributes of each column (NOTE the attirbutes of the date column -- it is a factor and we want it to be a date/time0)\n\n'data.frame':   47200 obs. of  5 variables:\n $ X         : int  1 2 3 4 5 6 7 8 9 10 ...\n $ date      : chr  \"07/01/2021 00:00:00\" \"07/01/2021 00:00:00\" \"07/01/2021 00:00:00\" \"07/01/2021 00:00:00\" ...\n $ probe_name: chr  \"B2_T2\" \"B2_pH2\" \"B1_pH2\" \"B1_T2\" ...\n $ probe_type: chr  \"Temp\" \"pH\" \"pH\" \"Temp\" ...\n $ value     : num  18.1 4.53 8.12 17.7 17.7 8.12 19.7 7.99 18.1 4.53 ...\n\n\n\n\n\nTo do this we just need to recognize the order of or date/time. For example, we might have year, month, day, hours, minutes OR day, month, year, hours, minutes in order from left to right.\nIn this case we have: 07/01/2021 00:00:00 or month/day/year hours:minutes:seconds. We care about the order of these. So to simply, we have mdy_hms Lubridate has functions for all combinations of these formats. So, mdy_hms() is one. You may also have ymd_hm() or any other combo. You just enter your date info followed by an underscore and then your time info. Here’s how you apply this!\n\nstr(dat)\n\n'data.frame':   47200 obs. of  5 variables:\n $ X         : int  1 2 3 4 5 6 7 8 9 10 ...\n $ date      : chr  \"07/01/2021 00:00:00\" \"07/01/2021 00:00:00\" \"07/01/2021 00:00:00\" \"07/01/2021 00:00:00\" ...\n $ probe_name: chr  \"B2_T2\" \"B2_pH2\" \"B1_pH2\" \"B1_T2\" ...\n $ probe_type: chr  \"Temp\" \"pH\" \"pH\" \"Temp\" ...\n $ value     : num  18.1 4.53 8.12 17.7 17.7 8.12 19.7 7.99 18.1 4.53 ...\n\ndat$date&lt;-mdy_hms(dat$date) #converts our date column into a date/time object based on the format (order) of our date and time \n\nstr(dat)# date is no longer a factor but is now a POSIXct object, which means it is in date/time format and can be used for plots and time series!\n\n'data.frame':   47200 obs. of  5 variables:\n $ X         : int  1 2 3 4 5 6 7 8 9 10 ...\n $ date      : POSIXct, format: \"2021-07-01 00:00:00\" \"2021-07-01 00:00:00\" ...\n $ probe_name: chr  \"B2_T2\" \"B2_pH2\" \"B1_pH2\" \"B1_T2\" ...\n $ probe_type: chr  \"Temp\" \"pH\" \"pH\" \"Temp\" ...\n $ value     : num  18.1 4.53 8.12 17.7 17.7 8.12 19.7 7.99 18.1 4.53 ...\n\n\n\n\n\nHere we have two example graphs that show why dates are annoying and how using lubridate helps us!\nA graph using the raw data alone (not changing date to a date/time object)\n\n\n\n\n\nsame graph after making date into a date/time object\n\n\n\n\n\n\n\n\n\n\n\n5.) Lab 1 Assignment\n\n1.) Make a new data frame called ‘trees_dat’ from the data ‘trees’ that is pre-loaded in R. Note that there are 3 columns in this data frame. ‘Girth’ is the estimated diameter of the tree in inches measured at 4.5 feet off the ground. ‘Height’ is the height of the tree in feet and ‘Volume’ is the volume of the tree in feet. We will use our knowledge of geometry to see how cylindrical the trees are.\n2.) Using the ‘trees’ data, calculate the diameter and radius of the trees in feet (you will need to make new columns and use math).\n3.) Now, convert your calculated diameter to inches and compare to the ‘girth’ column. Does it match? If not, what might explain the differences?\n4.) Next, make a new data frame called ‘pens’ in your local environment from the ‘penguins’ data in the PalmerPenguins package. Subset the data to only include Adele penguins.\n5.) Now, subset that data again so that you only have Adele penguins from the island called ‘Dream’.\n6.) Trim the dataset so that we only have the columns ‘species’, ‘island’, and ‘bill_length_mm’.\n7.) Make a new data frame called ‘lobs’ from the ‘Loblolly’ data that is pre-loaded in R. These data show height (ft) and age (yr) of trees, identified by a numerical code (Seed).\n8.) Pivot this data wider such that every row is an age and every column is a different ‘Seed’. We should see height data across ages for each individual ‘Seed’ (tree) in each column.\n9.) Once you successful pivot the data wider, let’s pivot it back to long format. This should give us just three columns again (age, seed, and height). Note that when you pivot_longer you will need to name your new columns. See help for pivot_longer() for some examples. This should look similar or the same as our original ‘lobs’ data frame.\n10.) Render your document and turn in your .html file on Moodle. Don’t forget embed-resources: true in your header!"
  },
  {
    "objectID": "Lab_1.html#read-in-some-data",
    "href": "Lab_1.html#read-in-some-data",
    "title": "Lab 1: Intro to Data Wrangling",
    "section": "Read in some data",
    "text": "Read in some data\nWe can mess with a few data sets that are built into R or into R packages.\nA common one is mtcars, which is part of base R (attributes of a bunch of cars)\n\nhead(mtcars)\n\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n\n\nAnother fun one is CO2, which is also part of base R (CO2 uptake from different plants). Note: co2 (no caps) is also a dataset in R. It’s just the CO2 concentration at Maona Loa observatory every year (as a list).\n\nhead(CO2)\n\n  Plant   Type  Treatment conc uptake\n1   Qn1 Quebec nonchilled   95   16.0\n2   Qn1 Quebec nonchilled  175   30.4\n3   Qn1 Quebec nonchilled  250   34.8\n4   Qn1 Quebec nonchilled  350   37.2\n5   Qn1 Quebec nonchilled  500   35.3\n6   Qn1 Quebec nonchilled  675   39.2\n\n\nYou are welcome to use these to practice with or you can choose from any of the datasets in the ‘datasets’ or ‘MASS’ packages (you have to load the package to get the datasets).\nYou can also load in your own data or pick something from online, as we learned how to do last time.\nLet’s stick with what we know for now– I will use the penguins data from the palmerpenguins package\nload the data\n\nlibrary(palmerpenguins)\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nadd the dataframe to our environment As you learned in the Rstudio basics tutorial above, one of the four main panels of the RStudio window contains the Environment tab. In this tab, we can see data that are stored locally in our session of R. While penguins is pre-loaded in R, it is nice to make a local copy so we can modify it easily.\nHere’s how we do that:\n\npenguins&lt;-penguins \n\nHere, the name of the new dataframe we want in our environment is to the left of the arrow and the name of the object we are calling is to the right. In simpler terms, we are defining a new dataframe called penguins (or any name we want) and it is defined as just an exact copy of penguins (the object that is already defined within palmerpenguins. This is the simplest example – we will quickly move on to more complex things. You will see that when you run this the dataframe ‘penguins’ appears in the local environment. You can call your local file anything you want, it does not need to be an exact copy of the orignal name! Choose names that are meaningful to you, but keep the names short and avoid spaces and other special characters as much as possible."
  }
]